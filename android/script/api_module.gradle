apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.alibaba.arouter'
kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
android {
    compileSdkVersion Integer.parseInt(rootProject.compileSdkVersion)
    buildToolsVersion rootProject.buildToolsVersion
    defaultConfig {
        (minSdkVersion, targetSdkVersion, versionCode, versionName) = [Integer.parseInt(rootProject.minSdkVersion),
                                                                       Integer.parseInt(rootProject.targetSdkVersion),
                                                                       rootProject.versionCode, rootProject.versionName]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        inhouse {
            initWith debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    annotationProcessor 'com.alibaba:arouter-compiler:1.5.2'
//    kapt 'com.alibaba:arouter-compiler:1.5.2'
    api 'com.alibaba:arouter-api:1.3.2'
}
def findArtifact() {
    def myGroupId = ''
    def myArtifactId = ''
    def myVersion = ''
    def moduleSimpleName = ''
    def sourcePath = ''
    def binaryPath = ''
    for (def module : gradle.ext.modules) {
        if (project.path == module.sourcePath) {
            moduleSimpleName = module.simpleName
            sourcePath = module.sourcePath
            binaryPath = module.binaryPath
            myGroupId = binaryPath.split(":")[0]
            myArtifactId = binaryPath.split(":")[1]
            myVersion = binaryPath.split(":")[2]
            println("cjf ${myGroupId} $myArtifactId $myVersion")
            break
        }
    }
    if ((moduleSimpleName == null || moduleSimpleName.isEmpty())
            || (sourcePath == null || sourcePath.isEmpty())
            || (binaryPath == null || binaryPath.isEmpty())
    ) {
        throw IllegalArgumentException("moduleSimpleName:${moduleSimpleName} :sourcePath${sourcePath} :binaryPath${binaryPath} 这些参数都要配置")
    }
    return [moduleSimpleName,myGroupId,myArtifactId,myVersion]
}
def (moduleSimpleName,myGroupId, myArtifactId,myVersion) = findArtifact()
apply from : "${rootDir}/script/module_publisher.gradle"
publish {
    name = moduleSimpleName
    groupId = myGroupId
    artifactId = myArtifactId
    version = "1.0.0"
    website = "https://github.com/JamesfChen/spacecrafe-android"
}
