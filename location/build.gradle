println("lib location start")
if (isComponentMode.toBoolean()) {
    apply plugin: 'com.android.application'
    apply plugin: 'versionplugin'
} else {
    apply plugin: 'com.android.library'
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        component {
            initWith debug
            debuggable true
        }
    }
    if (isComponentMode.toBoolean()) {
        versionPlugin {
            buildTypeMatcher = 'debug'
//        '$appName/project/buildType-v_$versionName-c_$versionCode'
//        fileFormat = '$appName-v_$versionName-c_$versionCode'
            fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode'

        }
    }


    sourceSets{
        component{
            java.srcDirs=['src/component/java']
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api project(path: ':common')
}
println("lib location end")