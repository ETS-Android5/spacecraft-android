apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-android-extensions"
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply from: "${rootProject.getRootDir().getAbsolutePath()}/script/testlib.gradle"

def srcDirs = [
        "async",
        "serialization",

]
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        component {
            initWith debug
            debuggable true
        }
    }
    sourceSets {
        main {
//            java.includes = srcDirs.collect { 'src/' + it + '/**/*.java' }
            java.excludes = [
                    '**/build/**',
            ]
//            srcDirs.forEach {
//                res.srcDirs += 'src/' + it + '/res'
//                res.srcDirs += 'src/' + it + '/res-frame-animation'
//                assets.srcDirs += 'src/' + it + '/assets'
//                java.srcDirs += 'src/' + it + '/java'
//                aidl.srcDirs += 'src/' + it + '/aidl'
//            }
            srcDirs.forEach {
                assets.srcDirs += "$projectDir/$it/main/assets"
                aidl.srcDirs += "$projectDir/$it/main/aidl"
                res.srcDirs += "$projectDir/$it/main/res"
                java.srcDirs += "$projectDir/$it/main/java"
            }
        }
//        main.java.srcDirs += ["src/main/kotlin"]
//
//        //carousel component
//        main.java.srcDirs += ["src/carousel/java"]
//        main.res.srcDirs += ["src/carousel/res"]
//        main.assets.srcDirs += ["src/carousel/assets"]
//
//        //video component
//        main.aidl.srcDirs += ["src/video/aidl"]
//        main.java.srcDirs += ["src/video/java"]
//        main.res.srcDirs += ["src/video/res"]
//        main.assets.srcDirs += ["src/video/assets"]
        androidTest {
            srcDirs.forEach {
                assets.srcDirs += "$projectDir/$it/androidTest/assets"
                aidl.srcDirs += "$projectDir/$it/androidTest/aidl"
                res.srcDirs += "$projectDir/$it/androidTest/res"
                java.srcDirs += "$projectDir/$it/androidTest/java"
            }
        }
        test {
            srcDirs.forEach {
//                res.srcDirs += "$projectDir/$it/test/resources"
                java.srcDirs += "$projectDir/$it/test/java"
            }

        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api 'androidx.core:core-ktx:1.1.0'
    api 'androidx.multidex:multidex:2.0.1'
    api "com.jakewharton.rxbinding2:rxbinding-kotlin:2.0.0"
    //    api 'com.jakewharton.timber:timber:4.5.1'
    api "com.blankj:utilcode:1.24.2"
    api 'joda-time:joda-time:2.10'
    api 'com.googlecode.libphonenumber:libphonenumber:8.2.0'
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.31"

    debugApi 'me.ele:uetool:1.0.17'
    releaseApi 'me.ele:uetool-no-op:1.0.17'
    // if you want to show more attrs about Fresco's DraweeView
//    debugApi 'me.ele:uetool-fresco:1.0.17'
    api("com.squareup.okio:okio:2.3.0")
    api "androidx.appcompat:appcompat:1.1.0"
    /**
     * ===============================async start================================
     */
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0"
    api "io.reactivex.rxjava2:rxkotlin:2.2.0"
    api "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxjavaVersion}"
    api "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxandroidVersion}"

    /**
     * ===============================async end================================
     */
    /**
     * ===============================serialization start================================
     */
    api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.1"
    annotationProcessor 'org.parceler:parceler:1.1.12'
    api 'org.parceler:parceler-api:1.1.12'

    //》》》》》》》》json

    //api 'com.google.code.gson:gson:2.8.2'


    api 'com.alibaba:fastjson:1.2.54'

    api("com.squareup.moshi:moshi:1.8.0")
    api 'com.squareup.moshi:moshi-adapters:1.8.0'
    api("com.squareup.moshi:moshi-kotlin:1.8.0")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:1.8.0")
    api "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofitVersion}"
//    api "com.squareup.retrofit2:converter-moshi:${rootProject.ext.retrofitVersion}"


    //》》》》》》protobuf

    //api 'com.google.protobuf:protobuf-lite:3.0.1'
    //    api("com.squareup.retrofit2:converter-protobuf:${rootProject.ext.retrofitVersion}")
    api "com.squareup.retrofit2:converter-wire:${rootProject.ext.retrofitVersion}"

    /**
     * ===============================serialization end================================
     */


    /**
     * ===============================mvvm start================================
     */
    annotationProcessor 'androidx.databinding:databinding-compiler:3.6.0-alpha12'
    api 'com.github.markzhai:databinding-rv-adapter:1.0.1'
    // Lifecycles only (no ViewModel or LiveData)
    api 'androidx.lifecycle:lifecycle-extensions:2.2.0-alpha05'
    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.2.0-alpha05'
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-alpha05"
    api "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-alpha05"
    api "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha05"
    //If you use Java 8 Language, then observe events with DefaultLifecycleObserver
//    api 'androidx.lifecycle:lifecycle-common-java8:2.1.0-alpha03'
//    api 'com.trello.rxlifecycle3:rxlifecycle:3.0.0'
//
//// If you want to bind to Android-specific lifecycles
//    api 'com.trello.rxlifecycle3:rxlifecycle-android:3.0.0'
//
//// If you want pre-written Activities and Fragments you can subclass as providers
//    api 'com.trello.rxlifecycle3:rxlifecycle-components:3.0.0'
//
//// If you want pre-written support preference Fragments you can subclass as providers
//    api 'com.trello.rxlifecycle3:rxlifecycle-components-preference:3.0.0'
//
//// If you want to use Android Lifecycle for providers
//    api 'com.trello.rxlifecycle3:rxlifecycle-android-lifecycle:3.0.0'
//
// If you want to use Kotlin syntax
//    api 'com.trello.rxlifecycle3:rxlifecycle-kotlin:3.0.0'
// If you want to use Kotlin syntax with Android Lifecycle
//    api 'com.trello.rxlifecycle3:rxlifecycle-android-lifecycle-kotlin:3.0.0'

    /**
     * ===============================mvvm end================================
     */

    /**
     * ===============================decoupling start================================
     */
    api 'org.greenrobot:eventbus:3.1.1'
    // Dagger dependencies
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.ext.daggerVersion"
    api "com.google.dagger:dagger:$rootProject.ext.daggerVersion"
    api "com.google.dagger:dagger-android:$rootProject.ext.daggerVersion"
    api "com.google.dagger:dagger-android-support:$rootProject.ext.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$rootProject.ext.daggerVersion"
    /**
     * ===============================decoupling  end================================
     */




    /**
     * ===============================monitor start=============================
     */
    //crash and anr
    api 'com.tencent.bugly:nativecrashreport:3.7.1'
//    api 'com.tencent.bugly:crashreport_upgrade:1.3.5'
    api 'com.tencent.bugly:crashreport:3.0.0'
    api "com.orhanobut:logger:${rootProject.ext.loggerVersion}"
    //memory leak
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${rootProject.ext.leakcanaryVersion}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.ext.leakcanaryVersion}"
    // Optional, if you use support library fragments:
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:${rootProject.ext.leakcanaryVersion}"

    api 'com.google.firebase:firebase-core:17.2.0'
    api 'com.google.firebase:firebase-perf:19.0.0'
    api 'com.google.firebase:firebase-config:19.0.1'

    api 'com.facebook.stetho:stetho:1.5.1'
    api 'com.facebook.stetho:stetho-js-rhino:1.5.1'
    /**
     * ===============================monitor end=============================
     */

    /**
     * ===============================image start=============================
     */
    api "com.github.bumptech.glide:glide:${rootProject.ext.glideVersion}"
    annotationProcessor "com.github.bumptech.glide:compiler:${rootProject.ext.glideVersion}"
    /**
     * ===============================image end=============================
     */



}
