println("app start")
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-android-extensions"
//apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'versionplugin'
//apply plugin: com.hawksjamesf.plugin.VersionPluginForJava
apply plugin: 'versionpluginforjava'
apply plugin: 'versionpluginforkotlin'
versionPlugin {
    buildTypeMatcher = 'debug'
//        '$appName/project/buildType-v_$versionName-c_$versionCode'
//        fileFormat = '$appName-v_$versionName-c_$versionCode'
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}

versionPluginForJava {
    buildTypeMatcher = "debug"
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}


versionPluginForKotlin {
    buildTypeMatcher = "debug"
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}

apply plugin: 'findbugs'
findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
//    sourceSets=[sourceSets.main]
    excludeFilter = file("config/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
apply from: "${rootProject.getRootDir().getAbsolutePath()}/script/util.gradle"
apply from: "${rootProject.getRootDir().getAbsolutePath()}/script/testlib.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'

def getVersion() {
    [rootProject.ext.minSdkVersion, rootProject.ext.targetSdkVersion, rootProject.ext.versionCode, rootProject.ext.versionName]
}


task exportVarToShell(type: Exec) {
    commandLine "${rootProject.getRootDir().getAbsolutePath()}/script/export_var.sh"
    args "${rootProject.ext.versionName}", "${rootProject.getRootDir().getAbsolutePath()}"
//        args = "VERSION_NAME=${rootProject.ext.versionName}"
//    }
//}
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        (minSdkVersion, targetSdkVersion, versionCode, versionName) = getVersion()

        multiDexEnabled = true
//        multiDexKeepFile file('multiDexKeepFile.txt')
        multiDexKeepProguard file('multiDexKeep.pro')
        applicationId "com.hawksjamesf.spacecraft"
        testApplicationId "com.hawksjamesf.spacecraft.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
//             设置支持的SO库架构
            abiFilters 'x86_64'
            abiFilters 'x86'
            abiFilters 'armeabi-v7a'
            abiFilters 'arm64-v8a'
        }
//        buildConfigField("String", "WEATHER_URL_XIAO_MI", '"https://weatherapi.market.xiaomi.com"')
//        buildConfigField("String", "WEATHER_URL_CAI_YUN_APP", '"https://api.caiyunapp.com"')
//        buildConfigField('String', 'WEATHER_URL_OPEN_WEATHER_MAP', '"https://api.openweathermap.org"')
        buildConfigField('String', 'BUGLY_APP_ID', '"3d62251014"')
        buildConfigField('String', 'BUGLY_APP_KEY', '"a15ecf84-1786-40c6-abf5-fe975fce22e6"')
        buildConfigField('String', 'XIAOMI_APP_ID', '"2882303761517994447"')
        buildConfigField('String', 'XIAOMI_APP_KEY', '"5921799441447"')
        manifestPlaceholders = [
                'BUGLY_APP_ID': '3d62251014', 'BUGLY_APP_KEY': 'a15ecf84-1786-40c6-abf5-fe975fce22e6', "BUGLY_APP_VERSION": "${rootProject.ext.versionName}"
        ]

        //lower 5.x
//        vectorDrawables.useSupportLibrary = true
//        vectorDrawables.generatedDensities = []
    }
    def releaseKeySet = ['RELEASE_KEY_ALIAS', 'RELEASE_STORE_PASSWORD', 'RELEASE_KEY_PASSWORD']
    def debugKeySet = ['DEBUG_KEY_ALIAS', 'DEBUG_STORE_PASSWORD', 'DEBUG_KEY_PASSWORD']
    signingConfigs {
        debugSigningConfig {
            (keyAlias, keyPassword, storePassword) = getKeyStoreProperties(debugKeySet)
            storeFile file("${rootProject.getRootDir().getAbsolutePath()}/keystore/debug.jks")
            v1SigningEnabled true
            v2SigningEnabled = true

        }
        releaseSigningConfig {
            (keyAlias, keyPassword, storePassword) = getKeyStoreProperties(releaseKeySet)
            storeFile file("${rootProject.getRootDir().getAbsolutePath()}/keystore/release.jks")
            v1SigningEnabled true
            v2SigningEnabled = true
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = ['QQ_KEY': 'adf', 'WEXIN_KEY': 'adfaf', 'BUGLY_ENABLE_DEBUG': 'false']
            signingConfig signingConfigs.releaseSigningConfig


        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix = '.debug'
            manifestPlaceholders = [
                    'QQ_KEY'            : 'adf', 'WEXIN_KEY': 'adfaf',
                    'BUGLY_ENABLE_DEBUG': 'true'
            ]
//            signingConfig signingConfigs.debugSigningConfig
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

//    useLibrary 'android.test.runner'
//    useLibrary 'android.test.base'
//    useLibrary 'android.test.mock'
    dataBinding {
        enabled = true
    }
    defaultPublishConfig 'xiaomiRealRelease'
    flavorDimensions 'channel', 'data_access'
    productFlavors {
        mocked {
            dimension 'data_access'
            matchingFallbacks = ['mocked']
        }
        real {
            dimension 'data_access'
            matchingFallbacks = ['real']
        }
        xiaomi {
            dimension 'channel'
            manifestPlaceholders = [
                    'BUGLY_APP_CHANNEL': 'asdfasdfsdaf',
            ]
        }
        huawei {
            dimension 'channel'
            manifestPlaceholders = [
                    'BUGLY_APP_CHANNEL': 'asdfasdfsdaf',
            ]
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        def buildType = variant.buildType.name
        if ((names.contains("mocked") && buildType.contains("release"))
                || names.contains("real") && buildType.contains("debug")) {
            setIgnore(true)
        }
    }

}
configurations {
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(path: ':location')
    implementation project(path: ':chatroom')
    implementation project(path: ':network')
    implementation project(path: ':storage')
    implementation project(path: ':uicomponent')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.ext.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-android-processor:$rootProject.ext.daggerVersion"
//    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    annotationProcessor 'androidx.room:room-compiler:2.1.0-alpha06'

    api 'com.crashlytics.sdk.android:crashlytics:2.10.0'
    implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation 'com.google.firebase:firebase-perf:16.2.5'
    implementation 'com.google.firebase:firebase-config:16.5.0'
//    implementation 'com.google.android.gms:play-services-location:16.0.0'
//    implementation 'com.google.android.gms:play-services-fitness:16.0.1'
    annotationProcessor project(path: ':processor')
    implementation project(path: ':annotations')
}
println("app end")
