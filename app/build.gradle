println("app start")
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-android-extensions"
//apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.alibaba.arouter'
//apply plugin: 'findbugs'
//findbugs {
//    ignoreFailures = false
//    toolVersion = "3.0.1"
////    sourceSets=[sourceSets.main]
//    excludeFilter = file("config/findbugs/excludeFilter.xml")
//    reportsDir = file("$project.buildDir/reports/findbugs")
//    effort = "max"
//}
//tasks.withType(FindBugs) {
//    reports {
//        xml.enabled false
//        html.enabled true
//    }
//}
//apply plugin: 'com.tencent.matrix-plugin'
ext.unusedResourcesSet = new HashSet<String>();
//matrix {
//    trace {
//        enable = true    //if you don't want to use trace canary, set false
//        baseMethodMapFile = "${project.buildDir}/matrix_output/Debug.methodmap"
//        blackListFile = "${project.projectDir}/matrixTrace/blackMethodList.txt"
//    }
////    removeUnusedResources {
////        enable true
////        variant = "debug"
////        needSign true
////        shrinkArsc true
////        apksignerPath = "${android.getSdkDirectory().getAbsolutePath()}/build-tools/${rootProject.buildToolsVersion}/apksigner"
////        unusedResources = project.ext.unusedResourcesSet
////        ignoreResources = ["R.id.*", "R.bool.*"]
////    }
//}

apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'com.tencent.buglyplugin'
bugly {
    appId = '3d62251014'
    appKey = 'a15ecf84-1786-40c6-abf5-fe975fce22e6'
}
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.jamesfchen.perfplugin'
//apply plugin: 'com.hawksjamesf.versionplugin'
//versionPlugin {
//    buildTypeMatcher = 'debug'
////        '$appName/project/buildType-v_$versionName-c_$versionCode'
////        fileFormat = '$appName-v_$versionName-c_$versionCode'
//    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
//}
apply plugin: 'com.jamesfchen.counterplugin'
counterConfig {
    seaSrcDirs = true
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        (minSdkVersion, targetSdkVersion, versionCode, versionName) = [rootProject.ext.minSdkVersion, rootProject.ext.targetSdkVersion, rootProject.ext.versionCode, rootProject.ext.versionName]

        multiDexEnabled = true//support android 20 or lower
//        multiDexKeepFile file('multiDexKeepFile.txt')
//        multiDexKeepProguard file('multiDexKeep.pro')
        applicationId "com.hawksjamesf.spacecraft"
        testApplicationId "com.hawksjamesf.spacecraft.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        buildConfigField("String", "WEATHER_URL_XIAO_MI", '"https://weatherapi.market.xiaomi.com"')
//        buildConfigField("String", "WEATHER_URL_CAI_YUN_APP", '"https://api.caiyunapp.com"')
//        buildConfigField('String', 'WEATHER_URL_OPEN_WEATHER_MAP', '"https://api.openweathermap.org"')
        buildConfigField('String', 'BUGLY_APP_ID', '"3d62251014"')
        buildConfigField('String', 'BUGLY_APP_KEY', '"a15ecf84-1786-40c6-abf5-fe975fce22e6"')
        buildConfigField('String', 'XIAOMI_APP_ID', '"2882303761517994447"')
        buildConfigField('String', 'XIAOMI_APP_KEY', '"5921799441447"')
        buildConfigField('String', 'AMAP_KEY', '"84198333a8ab4404cd35829dbb4ec435"')
        manifestPlaceholders = [
                'BUGLY_APP_ID': '3d62251014', 'BUGLY_APP_KEY': 'a15ecf84-1786-40c6-abf5-fe975fce22e6', "BUGLY_APP_VERSION": "${rootProject.ext.versionName}",
                'AMAP_KEY'    : '84198333a8ab4404cd35829dbb4ec435',
        ]
    }
    signingConfigs {
        debugSigningConfig {
            (keyAlias, keyPassword, storePassword) = ['123456', '123456', '123456']
            storeFile file("debug.jks")
            v1SigningEnabled true
            v2SigningEnabled true

        }
        releaseSigningConfig {
            (keyAlias, keyPassword, storePassword) = ['123456', '123456', '123456']
            storeFile file("debug.jks")
            v1SigningEnabled true
            v2SigningEnabled true
        }

    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = ['QQ_KEY': 'adf', 'WEXIN_KEY': 'adfaf', 'BUGLY_ENABLE_DEBUG': 'false']
            signingConfig signingConfigs.releaseSigningConfig
            firebaseCrashlytics {
                nativeSymbolUploadEnabled false
                mappingFileUploadEnabled false
            }
            firebaseAppDistribution {
//                releaseNotesFile="/path/to/releasenotes.txt"
                testers = "hawksjamesf@gmail.com"
                serviceCredentialsFile = "${projectDir}/spacecraft-22dc1-e7362822612d.json"
            }


        }
        debug {
//            minifyEnabled true
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix = '.debug'
            manifestPlaceholders = [
                    'QQ_KEY'            : 'adf', 'WEXIN_KEY': 'adfaf',
                    'BUGLY_ENABLE_DEBUG': 'true'
            ]
            signingConfig signingConfigs.debugSigningConfig
            ext.alwaysUpdateBuildId = false
            ext.enableCrashlytics = false
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
    }
    lintOptions {
        lintConfig project.file("$project.rootDir/lint.xml")
        htmlReport true
        htmlOutput project.file("$project.rootDir/lint-report-app.html")
        xmlReport true
        xmlOutput project.file("$project.rootDir/lint-report-app.xml")
        warningsAsErrors true
        abortOnError false
        checkReleaseBuilds false
        //        textReport true
//        // Produce report for CI:
//        // https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/sarif-support-for-code-scanning
//        sarifOutput project.file("$project.rootDir/lint-results.sarif")
//                // Turns off checks for the issue IDs you specify.
//                disable 'TypographyFractions','TypographyQuotes'
//                // Turns on checks for the issue IDs you specify. These checks are in
//                // addition to the default lint checks.
//                enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
//                // To enable checks for only a subset of issue IDs and ignore all others,
//                // list the issue IDs with the 'check' property instead. This property overrides
//                // any issue IDs you enable or disable using the properties above.
//                checkOnly 'NewApi', 'InlinedApi'
//                // If set to true, turns off analysis progress reporting by lint.
//                quiet true
//                // if set to true (default), stops the build if errors are found.
//                abortOnError false
//                // if true, only report errors.
//                ignoreWarnings true
    }

    //    buildFeatures {
//        viewBinding true
//    }
    //    buildFeatures {
//        dataBinding true
//    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', "arm64-v8a", 'armeabi', 'x86'
//            exclude "x86","x86_64"
            universalApk false
        }
    }
    /**
     * 渠道包 start
     */
//    defaultPublishConfig 'xiaomiRealRelease'
//    flavorDimensions 'channel', 'data_access'
//    flavorDimensions 'channel'
//    productFlavors {
//        mocked {
//            dimension 'data_access'
//            matchingFallbacks = ['mocked']
//        }
//        real {
//            dimension 'data_access'
//            matchingFallbacks = ['real']
//        }
//        xiaomi {
//            dimension 'channel'
//            manifestPlaceholders = [
//                    'BUGLY_APP_CHANNEL': 'asdfasdfsdaf',
//            ]
//            externalNativeBuild {
//                cmake {
//                    cppFlags "-std=c++14"
////                cppFlags "-std=gnu++11"
////                targets "hawks","hotfix"
//                    abiFilters "arm64-v8a", "armeabi-v7a", "x86","x86_64"   //输出制定三种abi体系结构下的so库
//                }
//            }
//
//        }
//        huawei {
//            dimension 'channel'
//            manifestPlaceholders = [
//                    'BUGLY_APP_CHANNEL': 'asdfasdfsdaf',
//            ]
//            externalNativeBuild {
//                cmake {
//                    cppFlags "-std=c++14"
////                cppFlags "-std=gnu++11"
////                targets "hawks","hotfix"
//                    abiFilters "arm64-v8a", "armeabi-v7a", "x86","x86_64"   //输出制定三种abi体系结构下的so库
//                }
//            }
//        }
//    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        def buildType = variant.buildType.name
        if ((names.contains("mocked") && buildType.contains("release"))
                || names.contains("real") && buildType.contains("debug")) {
            setIgnore(true)
        }
    }
    /**
     * 渠道包 end
     */

    packagingOptions {
        exclude 'META-INF/proguard/coroutines.pro'
    }
    applicationVariants.all { variant ->
        if (variant.name.equalsIgnoreCase("debug")) {
//            packageDebug.doLast {
//                ProcessBuilder processBuilder = new ProcessBuilder();
//                println configurations.apkCheckerDependency.getAt(0).getAbsolutePath()
//                processBuilder.command("java",
//                        "-jar", configurations.apkCheckerDependency.getAt(0).getAbsolutePath(),
//                        "--apk", variant.outputs.first().outputFile.getAbsolutePath(),
//                        "--output", project.getProjectDir().getAbsolutePath() + "/unused_resources",
//                        "--format", "json",
//                        "-unusedResources", "--rTxt", project.getBuildDir().getAbsolutePath() + "/intermediates/symbols/${variant.name}/R.txt");
//                Process process = processBuilder.start();
//                process.waitFor();
//                File outputFile = new File(project.getProjectDir().getAbsolutePath() + "/unused_resources.json");
//                if (outputFile.exists()) {
//                    Gson gson = new Gson();
//                    JsonArray jsonArray = gson.fromJson(outputFile.text, JsonArray.class);
//                    for (int i = 0; i < jsonArray.size(); i++) {
//                        if (jsonArray.get(i).asJsonObject.get("taskType").asInt == 12) {
//                            JsonArray resList = jsonArray.get(i).asJsonObject.get("unused-resources").asJsonArray;
//                            for (int j = 0; j < resList.size(); j++) {
//                                project.ext.unusedResourcesSet.add(resList.get(j).asString);
//                            }
//                            println "find unused resources:\n" + unusedResourcesSet
//                            break;
//                        }
//                    }
//                    outputFile.delete();
//                }
//            }
        }
        if (variant.buildType.name == 'release') {
//            def exportVarToShell = tasks.create(type: Exec) {
//                commandLine "${rootProject.getRootDir().getAbsolutePath()}${File.separator}script${File.separator}export_var.sh"
//                args "${rootProject.ext.versionName}", "${rootProject.getRootDir().getAbsolutePath()}"
//            }
//            exportVarToShell.mustRunAfter variant.assembleRelease
            new File(rootProject.getRootDir().getAbsolutePath(), "generation_version.properties")
                    .withWriter('utf-8') { writer ->
                        writer.writeLine "${rootProject.ext.versionName}"
//                      writer.writeLine 'A frog jumps'
//                      writer.writeLine 'Water’s sound!'
                    }
        }
    }
}
configurations {
    apkCheckerDependency
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}

//task exportVarToShell(type: Exec) {
//        commandLine "${rootProject.getRootDir().getAbsolutePath()}${File.separator}script${File.separator}export_var.sh"
//        args "${rootProject.ext.versionName}", "${rootProject.getRootDir().getAbsolutePath()}"
////        args = "VERSION_NAME=${rootProject.ext.versionName}"
////    }
////}
//}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    if (isHaHa.toBoolean()) {
        implementation project(path: ':components:template')
//        implementation project(path: ':components:module1')

    } else {
        implementation project(path: ':components:myhome')
        implementation project(path: ':components:login')
    }
    implementation project(path: ':components:hotel-module:bundle1')
    implementation project(path: ':components:hotel-module:bundle2')
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    apkCheckerDependency group: "com.tencent.matrix", name: "matrix-apk-canary", version: "0.6.0", changing: true
}
//buildDir = new File(rootProject.projectDir, "../build/host")
println("app end")
//在这个阶段可以下载一些东西
gradle.taskGraph.whenReady { taskGraph ->
    println("[ gradle configuration ] whenReady task关系图建立完毕 start")
    println("[ gradle configuration ] whenReady task关系图建立完毕 end")
}

