import com.google.gson.Gson
import com.google.gson.JsonArray

println("app start")
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-android-extensions"
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'versionplugin'
//apply plugin: com.hawksjamesf.plugin.VersionPluginForJava
apply plugin: 'versionpluginforjava'
versionPlugin {
    buildTypeMatcher = 'debug'
//        '$appName/project/buildType-v_$versionName-c_$versionCode'
//        fileFormat = '$appName-v_$versionName-c_$versionCode'
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}

versionPluginForJava {
    buildTypeMatcher = "debug"
    fileFormat = '$project-$appName-$buildType-v_$versionName-c_$versionCode-time_$releaseTime'
}
apply plugin: 'findbugs'
findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
//    sourceSets=[sourceSets.main]
    excludeFilter = file("config/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
apply from: "${rootProject.getRootDir().getAbsolutePath()}/script/util.gradle"
apply from: "${rootProject.getRootDir().getAbsolutePath()}/script/testlib.gradle"


apply plugin: 'com.tencent.matrix-plugin'
ext.unusedResourcesSet = new HashSet<String>();
matrix {
    trace {
        enable = true    //if you don't want to use trace canary, set false
        baseMethodMapFile = "${project.buildDir}/matrix_output/Debug.methodmap"
        blackListFile = "${project.projectDir}/matrixTrace/blackMethodList.txt"
    }
    removeUnusedResources {
        enable true
        variant = "debug"
        needSign true
        shrinkArsc true
        apksignerPath = "${android.getSdkDirectory().getAbsolutePath()}/build-tools/${android.getBuildToolsVersion()}/apksigner"
        unusedResources = project.ext.unusedResourcesSet
        ignoreResources = ["R.id.*", "R.bool.*"]
    }
}

apply plugin: 'com.google.firebase.firebase-perf'
//apply plugin: com.hawksjamesf.plugin.PerformancePlugin
apply plugin: 'perfplugin'
//apply plugin: 'bugly'
//bugly {
//    appId = '3d62251014'
//    appKey = 'a15ecf84-1786-40c6-abf5-fe975fce22e6'
//}
apply plugin: 'io.fabric'
crashlytics {
    enableNdk true
}

def getVersion() {
    [rootProject.ext.minSdkVersion, rootProject.ext.targetSdkVersion, rootProject.ext.versionCode, rootProject.ext.versionName]
}
def srcDirs = [
        "navigation",
        "paging",
        "paging-lib",
        "workmanager",
        "workmanager-lib",
        "mvvm",

]


task exportVarToShell(type: Exec) {
    commandLine "${rootProject.getRootDir().getAbsolutePath()}/script/export_var.sh"
    args "${rootProject.ext.versionName}", "${rootProject.getRootDir().getAbsolutePath()}"
//        args = "VERSION_NAME=${rootProject.ext.versionName}"
//    }
//}
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        (minSdkVersion, targetSdkVersion, versionCode, versionName) = getVersion()

        multiDexEnabled = true
//        multiDexKeepFile file('multiDexKeepFile.txt')
//        multiDexKeepProguard file('multiDexKeep.pro')
        applicationId "com.hawksjamesf.spacecraft"
        testApplicationId "com.hawksjamesf.spacecraft.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        buildConfigField("String", "WEATHER_URL_XIAO_MI", '"https://weatherapi.market.xiaomi.com"')
//        buildConfigField("String", "WEATHER_URL_CAI_YUN_APP", '"https://api.caiyunapp.com"')
//        buildConfigField('String', 'WEATHER_URL_OPEN_WEATHER_MAP', '"https://api.openweathermap.org"')
        buildConfigField('String', 'BUGLY_APP_ID', '"3d62251014"')
        buildConfigField('String', 'BUGLY_APP_KEY', '"a15ecf84-1786-40c6-abf5-fe975fce22e6"')
        buildConfigField('String', 'XIAOMI_APP_ID', '"2882303761517994447"')
        buildConfigField('String', 'XIAOMI_APP_KEY', '"5921799441447"')
        manifestPlaceholders = [
                'BUGLY_APP_ID': '3d62251014', 'BUGLY_APP_KEY': 'a15ecf84-1786-40c6-abf5-fe975fce22e6', "BUGLY_APP_VERSION": "${rootProject.ext.versionName}",
        ]

        //lower 5.x
//        vectorDrawables.useSupportLibrary = true
//        vectorDrawables.generatedDensities = []
    }
    def releaseKeySet = ['RELEASE_KEY_ALIAS', 'RELEASE_STORE_PASSWORD', 'RELEASE_KEY_PASSWORD']
    def debugKeySet = ['DEBUG_KEY_ALIAS', 'DEBUG_STORE_PASSWORD', 'DEBUG_KEY_PASSWORD']
    signingConfigs {
        debugSigningConfig {
            (keyAlias, keyPassword, storePassword) = getKeyStoreProperties(debugKeySet)
            storeFile file("${rootProject.getRootDir().getAbsolutePath()}/keystore/debug.jks")
            v1SigningEnabled true
            v2SigningEnabled = true

        }
        releaseSigningConfig {
            (keyAlias, keyPassword, storePassword) = getKeyStoreProperties(releaseKeySet)
            storeFile file("${rootProject.getRootDir().getAbsolutePath()}/keystore/release.jks")
            v1SigningEnabled true
            v2SigningEnabled = true
        }

    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = ['QQ_KEY': 'adf', 'WEXIN_KEY': 'adfaf', 'BUGLY_ENABLE_DEBUG': 'false']
            signingConfig signingConfigs.releaseSigningConfig


        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix = '.debug'
            manifestPlaceholders = [
                    'QQ_KEY'            : 'adf', 'WEXIN_KEY': 'adfaf',
                    'BUGLY_ENABLE_DEBUG': 'true'
            ]
//            signingConfig signingConfigs.debugSigningConfig
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    sourceSets {
        main {
            java.excludes = [
                    '**/build/**',
            ]
            srcDirs.forEach {
                assets.srcDirs += "$projectDir/$it/main/assets"
                aidl.srcDirs += "$projectDir/$it/main/aidl"
                res.srcDirs += "$projectDir/$it/main/res"
                java.srcDirs += "$projectDir/$it/main/java"
                renderscript.srcDirs +="$projectDir/$it/main/rs"
            }
        }
        androidTest {
            srcDirs.forEach {
                assets.srcDirs += "$projectDir/$it/androidTest/assets"
                aidl.srcDirs += "$projectDir/$it/androidTest/aidl"
                res.srcDirs += "$projectDir/$it/androidTest/res"
                java.srcDirs += "$projectDir/$it/androidTest/java"
            }
        }
        test {
            srcDirs.forEach {
                java.srcDirs += "$projectDir/$it/test/java"
            }

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
//    useLibrary 'android.test.runner'
//    useLibrary 'android.test.base'
//    useLibrary 'android.test.mock'
    dataBinding {
        enabled = true
    }
    /**
     * 渠道包 start
     */
    defaultPublishConfig 'xiaomiRealRelease'
//    flavorDimensions 'channel', 'data_access'
    flavorDimensions 'channel'
    productFlavors {
//        mocked {
//            dimension 'data_access'
//            matchingFallbacks = ['mocked']
//        }
//        real {
//            dimension 'data_access'
//            matchingFallbacks = ['real']
//        }
        xiaomi {
            dimension 'channel'
            manifestPlaceholders = [
                    'BUGLY_APP_CHANNEL': 'asdfasdfsdaf',
            ]
            externalNativeBuild {
                cmake {
                    cppFlags "-std=c++14"
//                cppFlags "-std=gnu++11"
//                targets "hawks","hotfix"
                    abiFilters "arm64-v8a", "armeabi-v7a", "x86","x86_64"   //输出制定三种abi体系结构下的so库
                }
            }

        }
        huawei {
            dimension 'channel'
            manifestPlaceholders = [
                    'BUGLY_APP_CHANNEL': 'asdfasdfsdaf',
            ]
            externalNativeBuild {
                cmake {
                    cppFlags "-std=c++14"
//                cppFlags "-std=gnu++11"
//                targets "hawks","hotfix"
                    abiFilters "arm64-v8a", "armeabi-v7a", "x86","x86_64"   //输出制定三种abi体系结构下的so库
                }
            }
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        def buildType = variant.buildType.name
        if ((names.contains("mocked") && buildType.contains("release"))
                || names.contains("real") && buildType.contains("debug")) {
            setIgnore(true)
        }
    }
    /**
     * 渠道包 end
     */

    packagingOptions {
        exclude 'META-INF/proguard/coroutines.pro'
    }

    applicationVariants.all { variant ->
        if (variant.name.equalsIgnoreCase("debug")) {
            packageDebug.doLast {
                ProcessBuilder processBuilder = new ProcessBuilder();
                println configurations.apkCheckerDependency.getAt(0).getAbsolutePath()
                processBuilder.command("java",
                        "-jar", configurations.apkCheckerDependency.getAt(0).getAbsolutePath(),
                        "--apk", variant.outputs.first().outputFile.getAbsolutePath(),
                        "--output", project.getProjectDir().getAbsolutePath() + "/unused_resources",
                        "--format", "json",
                        "-unusedResources", "--rTxt", project.getBuildDir().getAbsolutePath() + "/intermediates/symbols/${variant.name}/R.txt");
                Process process = processBuilder.start();
                process.waitFor();
                File outputFile = new File(project.getProjectDir().getAbsolutePath() + "/unused_resources.json");
                if (outputFile.exists()) {
                    Gson gson = new Gson();
                    JsonArray jsonArray = gson.fromJson(outputFile.text, JsonArray.class);
                    for (int i = 0; i < jsonArray.size(); i++) {
                        if (jsonArray.get(i).asJsonObject.get("taskType").asInt == 12) {
                            JsonArray resList = jsonArray.get(i).asJsonObject.get("unused-resources").asJsonArray;
                            for (int j = 0; j < resList.size(); j++) {
                                project.ext.unusedResourcesSet.add(resList.get(j).asString);
                            }
                            println "find unused resources:\n" + unusedResourcesSet
                            break;
                        }
                    }
                    outputFile.delete();
                }
            }
        }
    }
}
configurations {
    apkCheckerDependency
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(path: ':map')
    implementation project(path: ':chatroom')
    implementation project(path: ':network')
    implementation project(path: ':storage')
    implementation project(path: ':uicomponent')
    implementation project(path: ':common')
    implementation project(path: ':login')
    implementation project(path: ':image')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "com.google.dagger:dagger-compiler:2.16"
    kapt "com.google.dagger:dagger-android-processor:2.16"
//    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    kapt "com.github.bumptech.glide:compiler:4.10.0"

    api 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    api 'com.crashlytics.sdk.android:crashlytics-ndk:2.1.1'
//    implementation 'com.google.android.gms:play-services-location:16.0.0'
//    implementation 'com.google.android.gms:play-services-fitness:16.0.1'
    annotationProcessor project(path: ':processor')
    implementation project(path: ':annotations')
    apkCheckerDependency group: "com.tencent.matrix", name: "matrix-apk-canary", version:"0.6.0", changing: true

}
apply plugin: 'com.google.gms.google-services'
println("app end")

