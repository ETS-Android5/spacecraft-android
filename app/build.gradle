import com.google.gson.Gson
import com.google.gson.JsonArray

println("app start")
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-android-extensions"
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: 'com.google.gms.google-services'

apply plugin: 'findbugs'
findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
//    sourceSets=[sourceSets.main]
    excludeFilter = file("config/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
apply from: "${rootProject.getRootDir().getAbsolutePath()}/script/util.gradle"


apply plugin: 'com.tencent.matrix-plugin'
ext.unusedResourcesSet = new HashSet<String>();
matrix {
    trace {
        enable = true    //if you don't want to use trace canary, set false
        baseMethodMapFile = "${project.buildDir}/matrix_output/Debug.methodmap"
        blackListFile = "${project.projectDir}/matrixTrace/blackMethodList.txt"
    }
//    removeUnusedResources {
//        enable true
//        variant = "debug"
//        needSign true
//        shrinkArsc true
//        apksignerPath = "${android.getSdkDirectory().getAbsolutePath()}/build-tools/${rootProject.buildToolsVersion}/apksigner"
//        unusedResources = project.ext.unusedResourcesSet
//        ignoreResources = ["R.id.*", "R.bool.*"]
//    }
}

apply plugin: 'com.google.firebase.firebase-perf'
//apply plugin: 'bugly'
//bugly {
//    appId = '3d62251014'
//    appKey = 'a15ecf84-1786-40c6-abf5-fe975fce22e6'
//}
apply plugin: 'com.google.firebase.crashlytics'
//apply plugin: 'perfplugin'
//apply plugin: 'versionplugin'
//apply plugin: 'counterplugin'
//counterConfig{
//
//}

def getVersion() {
    [rootProject.ext.minSdkVersion, rootProject.ext.targetSdkVersion, rootProject.ext.versionCode, rootProject.ext.versionName]
}


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        (minSdkVersion, targetSdkVersion, versionCode, versionName) = getVersion()

        multiDexEnabled = true//support android 20 or lower
//        multiDexKeepFile file('multiDexKeepFile.txt')
//        multiDexKeepProguard file('multiDexKeep.pro')
        applicationId "com.hawksjamesf.spacecraft"
        testApplicationId "com.hawksjamesf.spacecraft.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        buildConfigField("String", "WEATHER_URL_XIAO_MI", '"https://weatherapi.market.xiaomi.com"')
//        buildConfigField("String", "WEATHER_URL_CAI_YUN_APP", '"https://api.caiyunapp.com"')
//        buildConfigField('String', 'WEATHER_URL_OPEN_WEATHER_MAP', '"https://api.openweathermap.org"')
        buildConfigField('String', 'BUGLY_APP_ID', '"3d62251014"')
        buildConfigField('String', 'BUGLY_APP_KEY', '"a15ecf84-1786-40c6-abf5-fe975fce22e6"')
        buildConfigField('String', 'XIAOMI_APP_ID', '"2882303761517994447"')
        buildConfigField('String', 'XIAOMI_APP_KEY', '"5921799441447"')
        buildConfigField('String', 'AMAP_KEY', '"84198333a8ab4404cd35829dbb4ec435"')
        manifestPlaceholders = [
                'BUGLY_APP_ID': '3d62251014', 'BUGLY_APP_KEY': 'a15ecf84-1786-40c6-abf5-fe975fce22e6', "BUGLY_APP_VERSION": "${rootProject.ext.versionName}",
                'AMAP_KEY'    : '84198333a8ab4404cd35829dbb4ec435',
        ]

        //lower 5.x
//        vectorDrawables.useSupportLibrary = true
//        vectorDrawables.generatedDensities = []
    }
    def releaseKeySet = ['RELEASE_KEY_ALIAS', 'RELEASE_STORE_PASSWORD', 'RELEASE_KEY_PASSWORD']
    def debugKeySet = ['DEBUG_KEY_ALIAS', 'DEBUG_STORE_PASSWORD', 'DEBUG_KEY_PASSWORD']
    signingConfigs {
        debugSigningConfig {
            (keyAlias, keyPassword, storePassword) = getKeyStoreProperties(debugKeySet)
            storeFile file("${rootProject.getRootDir().getAbsolutePath()}/keystore/debug.jks")
            v1SigningEnabled true
            v2SigningEnabled = true

        }
        releaseSigningConfig {
            (keyAlias, keyPassword, storePassword) = getKeyStoreProperties(releaseKeySet)
            storeFile file("${rootProject.getRootDir().getAbsolutePath()}/keystore/release.jks")
            v1SigningEnabled true
            v2SigningEnabled = true
        }

    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = ['QQ_KEY': 'adf', 'WEXIN_KEY': 'adfaf', 'BUGLY_ENABLE_DEBUG': 'false']
            signingConfig signingConfigs.releaseSigningConfig
            firebaseCrashlytics {
                nativeSymbolUploadEnabled false
                mappingFileUploadEnabled false
            }
            firebaseAppDistribution {
//                releaseNotesFile="/path/to/releasenotes.txt"
                testers = "hawksjamesf@gmail.com"
                serviceCredentialsFile = "${projectDir}/spacecraft-22dc1-e7362822612d.json"
            }


        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix = '.debug'
            manifestPlaceholders = [
                    'QQ_KEY'            : 'adf', 'WEXIN_KEY': 'adfaf',
                    'BUGLY_ENABLE_DEBUG': 'true'
            ]
            signingConfig signingConfigs.debugSigningConfig
            ext.alwaysUpdateBuildId = false
            ext.enableCrashlytics = false
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    dataBinding {
        enabled = true
    }
    /**
     * 渠道包 start
     */
//    defaultPublishConfig 'xiaomiRealRelease'
//    flavorDimensions 'channel', 'data_access'
//    flavorDimensions 'channel'
//    productFlavors {
//        mocked {
//            dimension 'data_access'
//            matchingFallbacks = ['mocked']
//        }
//        real {
//            dimension 'data_access'
//            matchingFallbacks = ['real']
//        }
//        xiaomi {
//            dimension 'channel'
//            manifestPlaceholders = [
//                    'BUGLY_APP_CHANNEL': 'asdfasdfsdaf',
//            ]
//            externalNativeBuild {
//                cmake {
//                    cppFlags "-std=c++14"
////                cppFlags "-std=gnu++11"
////                targets "hawks","hotfix"
//                    abiFilters "arm64-v8a", "armeabi-v7a", "x86","x86_64"   //输出制定三种abi体系结构下的so库
//                }
//            }
//
//        }
//        huawei {
//            dimension 'channel'
//            manifestPlaceholders = [
//                    'BUGLY_APP_CHANNEL': 'asdfasdfsdaf',
//            ]
//            externalNativeBuild {
//                cmake {
//                    cppFlags "-std=c++14"
////                cppFlags "-std=gnu++11"
////                targets "hawks","hotfix"
//                    abiFilters "arm64-v8a", "armeabi-v7a", "x86","x86_64"   //输出制定三种abi体系结构下的so库
//                }
//            }
//        }
//    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        def buildType = variant.buildType.name
        if ((names.contains("mocked") && buildType.contains("release"))
                || names.contains("real") && buildType.contains("debug")) {
            setIgnore(true)
        }
    }
    /**
     * 渠道包 end
     */

    packagingOptions {
        exclude 'META-INF/proguard/coroutines.pro'
    }

    applicationVariants.all { variant ->
        if (variant.name.equalsIgnoreCase("debug")) {
            packageDebug.doLast {
                ProcessBuilder processBuilder = new ProcessBuilder();
                println configurations.apkCheckerDependency.getAt(0).getAbsolutePath()
                processBuilder.command("java",
                        "-jar", configurations.apkCheckerDependency.getAt(0).getAbsolutePath(),
                        "--apk", variant.outputs.first().outputFile.getAbsolutePath(),
                        "--output", project.getProjectDir().getAbsolutePath() + "/unused_resources",
                        "--format", "json",
                        "-unusedResources", "--rTxt", project.getBuildDir().getAbsolutePath() + "/intermediates/symbols/${variant.name}/R.txt");
                Process process = processBuilder.start();
                process.waitFor();
                File outputFile = new File(project.getProjectDir().getAbsolutePath() + "/unused_resources.json");
                if (outputFile.exists()) {
                    Gson gson = new Gson();
                    JsonArray jsonArray = gson.fromJson(outputFile.text, JsonArray.class);
                    for (int i = 0; i < jsonArray.size(); i++) {
                        if (jsonArray.get(i).asJsonObject.get("taskType").asInt == 12) {
                            JsonArray resList = jsonArray.get(i).asJsonObject.get("unused-resources").asJsonArray;
                            for (int j = 0; j < resList.size(); j++) {
                                project.ext.unusedResourcesSet.add(resList.get(j).asString);
                            }
                            println "find unused resources:\n" + unusedResourcesSet
                            break;
                        }
                    }
                    outputFile.delete();
                }
            }
        }
        if (variant.buildType.name == 'release') {
//            def exportVarToShell = tasks.create(type: Exec) {
//                commandLine "${rootProject.getRootDir().getAbsolutePath()}${File.separator}script${File.separator}export_var.sh"
//                args "${rootProject.ext.versionName}", "${rootProject.getRootDir().getAbsolutePath()}"
//            }
//            exportVarToShell.mustRunAfter variant.assembleRelease
            new File(rootProject.getRootDir().getAbsolutePath(), "generation_version.properties")
                    .withWriter('utf-8') { writer ->
                        writer.writeLine "${rootProject.ext.versionName}"
//                      writer.writeLine 'A frog jumps'
//                      writer.writeLine 'Water’s sound!'
                    }
        }
    }
}
configurations {
    apkCheckerDependency
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}

//task exportVarToShell(type: Exec) {
//        commandLine "${rootProject.getRootDir().getAbsolutePath()}${File.separator}script${File.separator}export_var.sh"
//        args "${rootProject.ext.versionName}", "${rootProject.getRootDir().getAbsolutePath()}"
////        args = "VERSION_NAME=${rootProject.ext.versionName}"
////    }
////}
//}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation project(path: ':components:login')
    implementation project(path :':components:myhome')
//    implementation project(path :':components:template')
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    apkCheckerDependency group: "com.tencent.matrix", name: "matrix-apk-canary", version: "0.6.0", changing: true

}
println("app end")

